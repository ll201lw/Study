一、什么是锁 java当中的锁、是在多线程环境下为保证共享资源健康、线程安全的一种手段。 线程操作某个共享资源之前，先对资源加一层锁，保证操作期间没有其他线程访问资源，当操作完成后，再释放锁。

二、锁的分类
![img.png](img.png)
以上都属于是一些锁的名称、属性。以Java来说，关于锁的大分类，就只有：悲观锁、乐观锁这两种。其余说的各种锁都是基于这两大分类下的细节实现。

2.1 悲观锁
悲观锁总是假设最坏的情况，认为所有的资源都是不安全的，随时会被其他线程操作、更改。所以操作资源前一定要加一把锁、防止其他线程访问，这样其他线程想拿到这个资源就会阻塞直到锁被上一个持有者释放。也就是说，共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程。

Java 中的悲观锁一般有两种实现方式:
1.synchronized关键字 2.基于Java同步器AQS的各种实现类

2.1.1 基于synchronized的实现 Java中的关键字、底层由Jvm虚拟机实现的同步机制，通过两条监听器指令：MONITORENTER（进入）、MONITOREXIT（退出)
来实现同步效果（代码编译成字节码文件后可看到指令）

synchronized有三种使用方式： 1.修饰静态方法:锁住的是类，该类下创建的所有对象都被锁住。 2.修饰实例方法:锁住的是当前对象，当前对象所属类创建的其他对象不受影响。 3.修饰代码块(
静态代码块、实例代码块):根据代码块所出区域来区别，如代码块在静态方法中，那锁的是整个类、如代码块在实例方法中，那锁住的是当前实例对象。

2.1.2 基于AQS的实现类
AQS全称（AbstractQueuedSynchronizer）。基于Java程序实现的一种抽象队列同步器框架。AQS定义了一个volatile修饰的int类型变量state来控制是否同步，提供一个unsafe实现的原子方法来更新state（也就是更新锁状态，是否上锁）。
